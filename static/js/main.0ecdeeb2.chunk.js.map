{"version":3,"sources":["product/new.js","appBar.js","product/productCard.js","product/bought.js","product/received.js","hooks/useFetch.js","App.js","serviceWorker.js","index.js"],"names":["AddProduct","addProduct","useState","name","setName","price","setPrice","store","setStore","deliveryDate","setDeliveryDate","handleClearForm","event","preventDefault","handleFormSubmit","newProduct","uuid","toFixed","Grid","container","justify","item","xs","xl","Typography","variant","gutterBottom","spacing","onSubmit","TextField","required","id","label","fullWidth","autoComplete","onChange","e","target","value","sm","type","InputLabel","Button","onClick","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","ButtonAppBar","handleChange","classes","className","AppBar","position","Toolbar","Tabs","aria-label","Tab","minWidth","fontSize","pos","marginBottom","marginTop","ProductCard","product","onReceive","usd","currency","setCurrency","Card","CardContent","color","component","size","priceInILS","priceInUSD","CardActions","BoughtProducts","products","rates","USD","map","columns","width","maxHeight","ReceivedProducts","React","page","setPage","rowsPerPage","setRowsPerPage","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","key","style","TableBody","slice","row","hover","role","tabIndex","TablePagination","rowsPerPageOptions","count","length","onChangePage","newPage","onChangeRowsPerPage","useFetch","url","options","response","setResponse","error","setError","useEffect","a","fetch","res","json","fetchData","TabPanel","props","children","index","other","hidden","aria-labelledby","Box","p","App","setValue","boughtProducts","setBoughtProducts","receivedProducts","setReceivedProducts","newValue","filter","removeProductFromBought","addProductToReceived","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0ecdeeb2.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {v4 as uuid} from \"uuid\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\n\nconst AddProduct = ({addProduct}) => {\n\n    const [name, setName] = useState(\"\")\n    const [price, setPrice] = useState(\"\")\n    const [store, setStore] = useState(\"\")\n    const [deliveryDate, setDeliveryDate] = useState(\"\")\n\n\n    const setFixedPrice = (event) => {\n        const price = +event.target.value;\n        setPrice(price);\n    }\n    const handleClearForm = (event) => {\n        event.preventDefault();\n        setName(\"\");\n        setPrice(\"\");\n        setStore(\"\");\n        setDeliveryDate(\"\");\n    }\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n        const newProduct = {\n            \"id\":uuid(),\n            \"name\": name,\n            \"price\": price.toFixed(2),\n            \"store\": store,\n            \"deliveryDate\": deliveryDate\n        }\n        addProduct(newProduct);\n        handleClearForm(event)\n    }\n\n\n    return (<Grid container justify={\"center\"}>\n        <Grid item xs={8} xl={6}>\n            <Typography variant=\"h6\" gutterBottom>\n                Please add an item\n            </Typography>\n            <Grid container spacing={3}>\n                <form onSubmit={handleFormSubmit}>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            required\n                            id=\"itemName\"\n                            name=\"itemName\"\n                            label=\"Item name\"\n                            fullWidth\n                            autoComplete=\"given-name\"\n                            onChange={e => setName(e.target.value)}\n                            value={name}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            required\n                            id=\"onlineStore\"\n                            name=\"onlineStore\"\n                            label=\"Online store\"\n                            fullWidth\n                            autoComplete=\"online-store\"\n                            onChange={e => setStore(e.target.value)}\n                            value={store}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            required\n                            id=\"price\"\n                            name=\"price\"\n                            label=\"Price (in USD)\"\n                            type=\"number\"\n                            onChange={setFixedPrice}\n                            value={price}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <InputLabel>Delivery Date</InputLabel>\n                        <TextField\n                            id=\"Delivery\"\n                            name=\"Delivery\"\n                            fullWidth\n                            type=\"date\"\n                            onChange={e => setDeliveryDate(e.target.value)}\n                            value={deliveryDate}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button variant=\"contained\" onClick={handleFormSubmit}>\n                            Submit\n                        </Button>\n                        <Button variant=\"contained\" onClick={handleClearForm}>\n                            Clear\n                        </Button>\n                    </Grid>\n                </form>\n            </Grid>\n        </Grid>\n    </Grid>)\n}\nexport default AddProduct;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from \"@material-ui/core/Box\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n\nexport default function ButtonAppBar({value,handleChange}) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Bar Store\n                    </Typography>\n                    <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                        <Tab label=\"Bought Products\"  />\n                        <Tab label=\"Received Products\"  />\n                    </Tabs>\n                </Toolbar>\n            </AppBar>\n\n        </div>\n    );\n}\n","import CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Card from \"@material-ui/core/Card\";\nimport React, {useState} from \"react\";\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n    },\n\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n        marginTop: 12,\n    },\n});\n\nconst ProductCard = ({product, onReceive, usd}) => {\n    const classes = useStyles();\n\n    const [currency, setCurrency] = useState(\"USD\");\n    const [price, setPrice] = useState(product.price);\n\n    const convertToILS = (priceInUSD) => {\n\n        setCurrency(\"ILS\");\n        setPrice( (priceInUSD / usd).toFixed(2));\n\n    }\n    const convertToUSD = (priceInILS) => {\n\n        setCurrency(\"USD\");\n        setPrice( (priceInILS * usd).toFixed(2));\n\n    }\n    return (<Card className={classes.root} variant=\"outlined\">\n        <CardContent>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                {product.name}\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n                {product.store}\n            </Typography>\n            <Typography className={classes.pos} color=\"textSecondary\">\n                {`${price} ${currency === \"USD\" ? \"$\" : \"₪\"}`}\n            </Typography>\n            <Button size=\"small\" onClick={() => {\n                currency === \"USD\" ? convertToILS(price) : convertToUSD(price)\n            }} variant={\"outlined\"}>\n                {`Show in ${currency === \"USD\" ? \"ILS\" : \"USD\"}`}\n            </Button>\n            <Typography variant=\"body2\" component=\"p\">\n                {product.deliveryDate}\n            </Typography>\n        </CardContent>\n        <CardActions>\n            <Button size=\"small\" onClick={() => onReceive(product)} variant={\"outlined\"}>Mark as received</Button>\n        </CardActions>\n    </Card>)\n}\nexport default ProductCard;\n","import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ProductCard from './productCard';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n    },\n\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n        marginTop: 12,\n    },\n});\nconst BoughtProducts = ({products,onReceive,rates}) => {\n    const classes = useStyles();\n    const usd = rates.USD;\n\n    return (\n        <div className={classes.pos}>\n            <Typography className={classes.title} color=\"primary\" gutterBottom>\n                Bought Products\n            </Typography>\n            {products.map((product) => {\n                return (<ProductCard product={product} onReceive={onReceive} usd={usd}/>)\n            })}\n        </div>\n    )\n}\nexport default BoughtProducts;\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst columns = [\n    {id: 'name', label: 'Name', minWidth: 170},\n    {id: 'price', label: 'Price', minWidth: 100},\n    {id: 'store', label: 'Store', minWidth: 100},\n    {id: 'currency', label: 'Currency', minWidth: 100},\n    {id: 'deliveryDate', label: 'Delivery Date', minWidth: 100},\n];\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\n\nexport default function ReceivedProducts({products}) {\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    style={{minWidth: column.minWidth}}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\n                                    {columns.map((column) => {\n                                        const value = row[column.id];\n                                        return (\n                                            <TableCell key={column.id} key={column.id}>\n                                                {value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={products.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n}\n\n\n","import React from \"react\";\n\n\nconst useFetch = (url, options) => {\n    const [response, setResponse] = React.useState(null);\n    const [error, setError] = React.useState(null);\n\n    React.useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await fetch(url, options);\n                const json = await res.json();\n                setResponse(json);\n            } catch (error) {\n                setError(error);\n            }\n        };\n        fetchData();\n    }, []);\n\n    return { response, error };\n};\nexport default useFetch;\n","import React, {useState} from 'react';\n\nimport AddProduct from \"./product/new\";\nimport AppBar from \"./appBar\";\nimport BoughtProducts from \"./product/bought\";\nimport ReceivedProducts from \"./product/received\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useFetch from \"./hooks/useFetch\";\n\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nfunction App() {\n    const [value, setValue] = React.useState(0);\n    const rates = useFetch(\"https://api.exchangeratesapi.io/latest/?base=ILS\");\n\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const [boughtProducts, setBoughtProducts] = useState([]);\n    const [receivedProducts, setReceivedProducts] = useState([]);\n\n    const addProductToBought = (product) => {\n        setBoughtProducts(products => [...products, product]);\n    }\n\n    const removeProductFromBought = (product) => {\n        const {id} = product;\n        setBoughtProducts(boughtProducts.filter(product => product.id !== id));\n    }\n    const addProductToReceived = (product) => {\n        setReceivedProducts(products => [...products, product]);\n    }\n\n    const onReceivedProduct = (product) => {\n        removeProductFromBought(product)\n        addProductToReceived(product)\n    }\n    if (!rates.response) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <div className=\"App\">\n            <AppBar value={value} handleChange={handleChange}/>\n            <AddProduct addProduct={addProductToBought}/>\n            <hr/>\n            <TabPanel value={value} index={0}>\n                <BoughtProducts products={boughtProducts} onReceive={onReceivedProduct} rates={rates.response.rates}/>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <ReceivedProducts products={receivedProducts}/>\n            </TabPanel>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}